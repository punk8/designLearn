●   抽象构件(Component)角色：
    这是一个抽象角色，它给参加组合的对象定义出公共的接口及其默认行为，可以用来管理所有的子对象。
    合成对象通常把它所包含的子对象当做类型为Component的对象。
    在安全式的合成模式里，构件角色并不定义出管理子对象的方法，这一定义由树枝构件对象给出。
●   树叶构件(Leaf)角色：树叶对象是没有下级子对象的对象，定义出参加组合的原始对象的行为。
●   树枝构件(Composite)角色：代表参加组合的有下级子对象的对象。
    树枝构件类给出所有的管理子对象的方法，如add()、remove()以及getChild()。


这里所说的安全性合成模式是指：
从客户端使用合成模式上看是否更安全，如果是安全的，那么就不会有发生误操作的可能，能访问的方法都是被支持的。

这里所说的透明性合成模式是指：从客户端使用合成模式上，是否需要区分到底是“树枝对象”还是“树叶对象”。
如果是透明的，那就不用区分，对于客户而言，都是Compoent对象，具体的类型对于客户端而言是透明的，是无须关心的。

对于合成模式而言，在安全性和透明性上，会更看重透明性，
毕竟合成模式的目的是：让客户端不再区分操作的是树枝对象还是树叶对象，而是以一个统一的方式来操作。